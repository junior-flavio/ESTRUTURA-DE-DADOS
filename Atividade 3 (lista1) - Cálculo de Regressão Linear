#include <stdio.h>
#include <stdlib.h>

// Definição da estrutura para um ponto
struct Ponto {
    double x;
    double y;
};

// Função para calcular a regressão linear
void calcularRegressaoLinear(struct Ponto *pontos, int n) {
    double somaX = 0.0, somaY = 0.0, somaXY = 0.0, somaX2 = 0.0;
    
    for (int i = 0; i < n; i++) {
        somaX += pontos[i].x;
        somaY += pontos[i].y;
        somaXY += pontos[i].x * pontos[i].y;
        somaX2 += pontos[i].x * pontos[i].x;
    }
    
    double mediaX = somaX / n;
    double mediaY = somaY / n;
    
    double a = (n * somaXY - somaX * somaY) / (n * somaX2 - somaX * somaX);
    double b = mediaY - a * mediaX;
    
    printf("Equação da regressão linear: y = %.4lf * x + %.4lf\n", a, b);
}

int main(int argc, char *argv[]) {
    if (argc != 2) {
        printf("Uso: %s <nome_arquivo.csv>\n", argv[0]);
        return 1;
    }
    
    FILE *arquivo = fopen(argv[1], "r");
    if (arquivo == NULL) {
        printf("Não foi possível abrir o arquivo.\n");
        return 1;
    }
    
    int numPontos = 0;
    while (fscanf(arquivo, "%*f,%*f\n") != EOF) {
        numPontos++;
    }
    
    rewind(arquivo);
    
    struct Ponto *pontos = (struct Ponto *)malloc(numPontos * sizeof(struct Ponto));
    if (pontos == NULL) {
        printf("Erro na alocação de memória.\n");
        return 1;
    }
    
    for (int i = 0; i < numPontos; i++) {
        fscanf(arquivo, "%lf,%lf\n", &pontos[i].x, &pontos[i].y);
    }
    
    fclose(arquivo);
    
    calcularRegressaoLinear(pontos, numPontos);
    
    free(pontos);
    
    return 0;
}
